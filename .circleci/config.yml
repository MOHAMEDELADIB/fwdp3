version: 2.1
orbs:
  slack: circleci/slack@4.12.0
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
              aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
              aws s3 rm "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
              aws s3 rb s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --force 
              
  notify_failure:
    description: 'slack-failure'
    steps:
      - slack/notify:
          event: fail
          channel: $SLACK_DEFAULT_CHANNEL
          template: basic_fail_1
  notify_success:
    description: 'slack-success'
    steps:
      - slack/notify:
          event: pass
          channel: $SLACK_DEFAULT_CHANNEL
          template: success_tagged_deploy_1
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.   
    steps:
      - run :
          when: on_fail
          name: Revert migrations
          command: |
            SUCCESS=$(curl --insecure https://keyvalue.immanuel.co/api/KeyVal/GetValue/3cg7aby9/70v5fi8w/migration_${CIRCLE_WORKFLOW_ID:0:7})
            if (( $SUCCESS==1 ));
            then 
              npm cache clean 
              rm -rf node_modules
              cd ~/project/backend
              npm i
              npm run migrations:revert
            
            fi
jobs:
    build-frontend:
      docker:
        -  image: cimg/node:13.8.0
      steps:
        - checkout
        - restore_cache:
            keys: [frontend-build]
        - run:
            name: Build front-end
            command: |
              cd frontend
              npm install
              npm run build
        - save_cache:
            paths: [frontend/node_modules]
            key: frontend-build
        - notify_success 

    build-backend:
      docker:
        -  image: cimg/node:13.8.0
      steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
    test-frontend:
      docker:
        -  image: cimg/node:13.8.0
      steps:
        - checkout
        - restore_cache:
            keys: [frontend-build]
        - run :
            name : Front-end-test
            command: |
              cd frontend
              npm install
              npm run test 
                
    test-backend:
      docker:
        - image: cimg/node:13.8.0
      steps:
        - checkout
        - restore_cache:
            keys: [backend-build]
        - run :
            name : backend-end-test
            command: |
              cd backend
              npm install
              npm run test   
    scan-frontend:
      docker:
        - image: cimg/node:13.8.0
      steps:
        - checkout
        - restore_cache:
              keys: [frontend-build]
        - run :
            name : Front-end-scan
            command: |
              cd frontend
              npm install
              npm audit fix --audit-level=critical
    scan-backend:
      docker:
        - image: cimg/node:13.8.0
      steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run :
          name : backend-end-scan
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical
    deploy-infrastructure:
      docker:
        - image: cimg/node:13.8.0
      steps:
        - checkout
        - run: 
            name: install dependencies
            command: |
              sudo apt update
              sudo apt install -y python3 python3-pip
              sudo apt install -y awscli
        - run:
            name: Ensure back-end infrastructure exists
            command: |
              aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
        - run:
            name: Ensure front-end infrastructure exist
            command: |
              aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 
        - run:
            name: Add back-end ip to ansible inventory
            command: |
              echo "[web]" > .circleci/ansible/inventory.txt
              aws ec2 describe-instances \
              --query "Reservations[*].Instances[*].PublicIpAddress" \
              --output=text >> .circleci/ansible/inventory.txt
        - persist_to_workspace:
            root: ~/
            paths:
              - project/.circleci/ansible/inventory.txt
        - notify_failure
        - notify_success 
        - destroy-environment

    configure-infrastructure:
      docker:
      # Docker image here that supports Ansible
        - image: python:3.12.0a1-alpine
      steps:
      - checkout
      # Add ssh keys with fingerprint 
      - add_ssh_keys:
          fingerprints: 
            - "37:54:7a:6e:66:9c:3d:7c:ee:60:94:a3:3a:f9:0d:1e"
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible 
            apk add --update tar
            apk add --no-cache \
            python3 \
            py3-pip \
            && pip3 install --upgrade pip \
            && pip3 install --no-cache-dir \
            awscli \
            && rm -rf /var/cache/apk/*

      - run:
          name: Configure server
          command: |
            cat ~/project/.circleci/ansible/inventory.txt
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      # Here's where you will add some code to rollback on failure 
      - destroy-environment
    run-migrations:
      docker:
        - image: cimg/node:19.1.0
      steps:
        - checkout
        - attach_workspace:
            at: ~/
        - run:
            name: Install dependencies
            command: |
              sudo apt-get update
              sudo apt-get install -y awscli
        - run:
            name: Run migrations
            command: |
              cd backend
              npm install
              npm run migrations 
              npm run migrations > migrations.txt
              cat ~/project/backend/migrations.txt
        - run:
            name: Send migration results to KVBD 
            command: |
              if grep -q "has been executed successfully." ~/project/backend/migrations.txt
              then
              echo "Migration Succesful"
              else
              echo "Migration failed"
              fi
        - revert-migrations
        - destroy-environment
    deploy-frontend:
      docker:
      - image: cimg/node:13.8.0
      steps:
        - checkout
        - restore_cache:
            keys: [frontend-build]
        - attach_workspace:
            at: ~/
        - run:
            name: Install dependencies
            command: |
              sudo apt update
              sudo apt install -y awscli  
        - run:
            name: Get backend url
            command: |
              export BACKEND_IP=$(aws ec2 describe-instances --query "Reservations[*].Instances[*].PublicIpAddress" --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output=text)
              export API_URL="http://${BACKEND_IP}:3030"
              echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
              echo "${API_URL}"
        - run:
            name: Deploy frontend objects
            command: |
              cd frontend
              npm install
              npm run build
              tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
              aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
        - revert-migrations
        - destroy-environment     
    deploy-backend:
      docker:
        - image: python:3.12.0a1-alpine
        
      steps:
        - checkout
        - attach_workspace:
            at: ~/
        - add_ssh_keys:
            fingerprints: 
              - "37:54:7a:6e:66:9c:3d:7c:ee:60:94:a3:3a:f9:0d:1e"
        - run:
            name: Install dependencies
            command: |
              apk update 
              apk add --update nodejs npm
              apk add --update ansible 
              apk add --update tar
              apk add --no-cache \
              python3 \
              py3-pip \
              && pip3 install --upgrade pip \
              && pip3 install --no-cache-dir \
              awscli \
              && rm -rf /var/cache/apk/*
        - run:
            name: Deploy backend
            command: |
              cd backend
              npm install
              npm run build
              cd ..
              # Zip the directory
              tar -C backend -czvf artifact.tar.gz .
              cd .circleci/ansible
              echo "Contents  of the inventory.txt file is -------"
              cat inventory.txt
              ansible-playbook -i inventory.txt deploy-backend.yml
        - revert-migrations
        - destroy-environment     
    smoke-test:
      docker:
        - image: cimg/node:13.8.0
      steps:
        - checkout
        - run:
            name: Install dependencies
            command: |
              sudo apt update
              sudo apt install -y python3 python3-pip
              sudo apt install -y awscli
        - run:
            name: Get backend url
            command: |
              export BACKEND_IP=$(aws ec2 describe-instances --query "Reservations[*].Instances[*].PublicIpAddress" --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output=text)
              
              export API_URL="http://${BACKEND_IP}:3030"
              echo "API_URL = ${API_URL}"  >> $BASH_ENV
        - run:
            name: Backend smoke test.
            command: |
              echo "API_URL = ${API_URL}" 
              export BACKEND_IP=$(aws ec2 describe-instances --query "Reservations[*].Instances[*].PublicIpAddress" --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output=text)
              export API_URL="http://${BACKEND_IP}:3030"
              if curl "${API_URL}/api/status" | grep "ok"
              then
                exit 0
              else
                exit 1
              fi
        - run:
            name: Frontend smoke test.
            command: |
              export FRONTEND_URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/index.html"
              echo $FRONTEND_URL
              if curl $FRONTEND_URL | grep "Welcome"
              then
              echo "success"
              exit 0
              else
              exit 1
              fi
        - revert-migrations
        - destroy-environment     
    cloudfront-update:
      docker:
      - image: amazon/aws-cli
      steps:
        - checkout
        - run:
            name: Install dependencies
            command: |
              sudo apt update
              sudo apt install -y python3 python3-pip
              sudo apt install -y awscli
        - run:
            name: Update cloudfront distribution
            command: |
              export OldWorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
              echo $OldWorkflowID > oldWorkflowId.txt
              aws cloudformation update-stack \
              --use-previous-template \
              --stack-name fwdstack \
              --parameters ParameterKey=WorkflowID,ParameterValue=${CIRCLE_WORKFLOW_ID:0:7}
        - run:
            name: install tar utilities
            command: |
              npm install -y tar gzip
        - persist_to_workspace:
            root: ~/
            paths:
            - project/oldWorkflowId.txt
        - revert-migrations
        - destroy-environment
    cleanup:
      docker:
        - image: cimg/node:13.8.0
      steps:
        - checkout
        - run:
            name: Fetch old stack workflow id
            command: |
              npm install -y tar gzip
        - attach_workspace:
            at: ~/
        - run:
            name: Remove old stacks and files
            command: |
              export OldWorkflowID=$(cat ~/project/oldWorkflowId.txt)
              export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
              cat 
              if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
              then
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws s3 rb s3://udapeople-${OldWorkflowID} --force
              aws cloudformation delete-stack --stack-name "backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "frontend-${OldWorkflowID}"
              echo "Stacks deleted succesfully"
              fi

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
              branches:
                only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]